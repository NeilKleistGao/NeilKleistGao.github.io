<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Conjugate Gradient</title>
      <link href="2020/10/08/conjugate-gradient/"/>
      <url>2020/10/08/conjugate-gradient/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>本篇文章是关于课程“数值分析与计算”中共轭梯度方法部分的笔记，包含该算法的部分推导和算法的实现，而忽略算法的正确性与收敛性证明和误差分析。</p><p>为了节约时间，本文使用中文编写。</p><a id="more"></a><h1 id="向量求导"><a href="#向量求导" class="headerlink" title="向量求导"></a>向量求导</h1><p>向量求导有相当多的形式（如：向量对标量求导，标量对向量求导，向量对向量求导）。为了节省篇幅，我们只说明对本文最重要的一个：标量对向量的求导。</p><p>对于一个函数<script type="math/tex">y = f(x)</script>，其中<script type="math/tex">x = [x_1, x_2, \dots, x_n]^T</script>为向量，<script type="math/tex">y</script>为标量，梯度<script type="math/tex">\nabla f = \frac{\partial y}{\partial x} = [\frac{\partial y}{\partial x_1}, \frac{\partial y}{\partial x_2}, \dots, \frac{\partial y}{\partial x_n}]</script>。其实本质就是把输入的向量看成<script type="math/tex">n</script>个变量，把<script type="math/tex">f(x)</script>看作一个多元函数，对其求梯度。</p><h1 id="最速下降法"><a href="#最速下降法" class="headerlink" title="最速下降法"></a>最速下降法</h1><h2 id="问题转换"><a href="#问题转换" class="headerlink" title="问题转换"></a>问题转换</h2><p>我们希望求解形如<script type="math/tex">Ax = b</script>的线性方程组。对于一般形式的矩阵，我们需要使用高斯消元；而对于特殊形式的矩阵，如对称正定矩阵，我们可以使用迭代的方式更方便地进行求解。</p><p>然而对于<script type="math/tex">Ax = b</script>，我们很难直接进行迭代求解（事实上，对于某些满足特殊条件的矩阵，我们可以进行一些简单的变换从而进行迭代，详见Jacobi算法和Gauss-Seidel算法）。迭代法本身更擅长于解决优化问题而不是线性方程组，所以我们试着把问题转移到最小化问题上。</p><p>将视线拉回到最前面提到的二次型上：<script type="math/tex">f(x) = \frac{1}{2}x^TAx - bx + c</script>。这个函数拥有一个全局最小值，并且可以使用迭代进行求解；最重要的是：这个函数的梯度<script type="math/tex">\nabla f = Ax - b</script>！而且当梯度为0时，刚好可以到达函数的最小值。</p><p>为了求出具体的数值，我们采取线性搜索的策略：每次选定一个方向，并在这个方向上进行搜索，找到该方向上的最小值，再根据更新后的位置，重新选取方向迭代。重复上述步骤，直到梯度被优化为0。</p><p>我们使用<script type="math/tex">r = b - Ax</script>来表示每次残差，即离真实值的距离；并令<script type="math/tex">p</script>表示我们每次迭代的方向向量。对于当前的迭代步骤<script type="math/tex">x_i</script>，我们有<script type="math/tex">f(x_{i + 1}) = f(x_i + \alpha_ip_i)</script>，当且仅当导函数为0时，我们找到了该方向的最小值点。所以</p><script type="math/tex; mode=display">\frac{\partial}{\partial \alpha}f(x_{i + 1}) = f'(x_{x + 1})^Tp_i = (Ax_{i + 1} - b)^Tp_i</script><p>根据梯度的性质，我们知道：随梯度负方向下降的速度是最快的。所以我们让<script type="math/tex">p_i</script>为当前点的梯度方向，有：</p><script type="math/tex; mode=display">\frac{\partial}{\partial \alpha}f(x_{i + 1}) = -r_{i + 1}^Tr_i = 0</script><p>我们将<script type="math/tex">\alpha_i</script>求解出来：<script type="math/tex">r_{i + 1}^Tr_i = (b - A(x_i + \alpha_ir_i))^Tr_i = 0</script>，解得：<script type="math/tex">\alpha_i = \frac{r_i^Tr_i}{r_i^TAr_i}</script>。这样我们就可以进行迭代了。</p><h2 id="为何不使用最速下降法"><a href="#为何不使用最速下降法" class="headerlink" title="为何不使用最速下降法"></a>为何不使用最速下降法</h2><p>梯度方向下降虽然幅度很大，但在迭代次数上却可能非常的多，下降过程很有可能是Z字形的。我们最理想的状态应该是：对于一个<script type="math/tex">n</script>维的空间，选择<script type="math/tex">n</script>个正交的向量，在每一个向量的方向上迭代一次，最终得出结果。换言之：当前的误差（记做<script type="math/tex">e_i = x_i - \bar{x}</script>，其中<script type="math/tex">\bar{x}</script>即为我们最终所求）和之前迭代的方向应该是正交的。所以<script type="math/tex">p_i^Te_{i + 1} = p_i^T(e_i + \alpha_ip_i) = 0</script>，于是我们得到：<script type="math/tex">\alpha_i = -\frac{p_i^Te_i}{p_i^Tp_i}</script>。</p><p>我们有了<script type="math/tex">\alpha_i</script>的式子，然而我们并不能得到<script type="math/tex">\alpha_i</script>：我们并不知道<script type="math/tex">e_i</script>的值（否则我们就知道答案了）。为此，我们需要使用矩阵向量正交（A-orthogonal）代替我们原本的正交。</p><p>如果两个向量<script type="math/tex">x, y</script>满足<script type="math/tex">x^TAy = 0</script>，我们称<script type="math/tex">x</script>A正交<script type="math/tex">y</script>，或<script type="math/tex">x</script>A<strong>共轭</strong><script type="math/tex">y</script>。当A为单位矩阵时，式子退化为普通的正交公式。</p><p>接下来我们继续研究如何找到<script type="math/tex">\alpha_i</script>。</p><h1 id="Gram-Schmidt正交化"><a href="#Gram-Schmidt正交化" class="headerlink" title="Gram-Schmidt正交化"></a>Gram-Schmidt正交化</h1><h2 id="普通的Gram-Schmidt正交化"><a href="#普通的Gram-Schmidt正交化" class="headerlink" title="普通的Gram-Schmidt正交化"></a>普通的Gram-Schmidt正交化</h2><p>对于普通的Gram-Schmidt正交化，我们首先选取两个向量<script type="math/tex">v_1, v_2</script>，并令<script type="math/tex">u_1 = v_1, u_2 = v_2 - k_u1</script>，此时的<script type="math/tex">u_1, u_2</script>应该是正交的。<br>对于以后的任意<script type="math/tex">u_i</script>，我们也都有：<script type="math/tex">u_i = v_i - \sum_{j = 1}^{i - 1}k_ju_j</script>。这样我们就完成了一组向量的正交化。</p><p>这个算法的本质是去除当前向量在其他正交向量上的投影，这样就能使当前向量与其他向量也保持正交。</p><h2 id="Gram-Schmidt正交化改"><a href="#Gram-Schmidt正交化改" class="headerlink" title="Gram-Schmidt正交化改"></a>Gram-Schmidt正交化改</h2><p>为了得到A共轭的一组向量，我们也需要使用Gram-Schmidt正交化，只不过在求系数<script type="math/tex">k</script>时，我们要做一些手脚。</p><p>因为</p><script type="math/tex; mode=display">u_i^TAu_j = v_i^TAu_j + \sum_{k = 1}^{i - 1}\beta_{ik}v_k^TAv_j = v_i^TAu_j + \beta_{ij}v_j^TAv_j = 0</script><p>所以我们可以求得：<script type="math/tex">\beta_{ij} = -\frac{v_i^TAu_j}{v_j^TAv_j}</script>。</p><p>如果我们要使用这个式子，我们需要面对复杂度过高的麻烦。所以在早期，这个算法都不大受人待见，直到共轭梯度被提出。</p><h1 id="共轭梯度法"><a href="#共轭梯度法" class="headerlink" title="共轭梯度法"></a>共轭梯度法</h1><p>我们将原来的式子带回到Gram-Schmidt正交化中：我们不妨改写<script type="math/tex">\beta_{i + 1, i}</script>为<script type="math/tex">\beta_{i}</script>（对于其他的情况来说，<script type="math/tex">\beta</script>为0，我们便不再做考虑），所以<script type="math/tex">\beta_i = -\frac{r_{i}^TAp_{i - 1} }{p_{i - 1}^TAp_{i - 1} }</script>。</p><p>因为<script type="math/tex">r_{j + 1} = r_j - \alpha_jAp_j</script>，我们在等式两侧同时左乘上<script type="math/tex">r_k^T</script>：<script type="math/tex">r_k^Tr_{j + 1} = r_k^Tr_j - \alpha_jr_k^TAp_j</script>，我们就可以拿到<script type="math/tex">r_k^TAp_j</script>的表达式。</p><p>此外，我们还可以得到一个有趣的性质：由于我们的方向选取是基于误差选取的，所以<script type="math/tex">p_i = r_i + \sum_{k = 0}^{i - 1}\beta_{ik}p_k</script>，所以<script type="math/tex">p_i^Tr_j = r_i^Tr_j</script>，当<script type="math/tex">i \ne j</script>时，两个向量正交，所以内积为0。即我们的误差之间也是正交的。</p><p>这下我们就可以进行化简了：</p><script type="math/tex; mode=display">\beta_i = -\frac{r_{i}^TAp_{i - 1} }{p_{i - 1}^TAp_{i - 1} } = \frac{r_i^Tr_i}{p_{i - 1}^Tr_{i - 1}}</script><p>最终我们的迭代公式为：</p><ul><li><script type="math/tex; mode=display">\alpha_i = \frac{r_i^Tr_i}{r_i^TAr_i}</script></li><li><script type="math/tex; mode=display">x_{i + 1} = x_i + \alpha_iAp_i</script></li><li><script type="math/tex; mode=display">r_{i + 1} = r_i - \alpha_iAp_i</script></li><li><script type="math/tex; mode=display">\beta_i = \frac{r_i^Tr_i}{p_{i - 1}^Tr_{i - 1}}</script></li><li><script type="math/tex; mode=display">p_{i + 1} = r_{i + 1} + \beta_ip_i</script></li></ul>]]></content>
      
      
      <categories>
          
          <category> Notes </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linear Algebra </tag>
            
            <tag> Numerical Analysis </tag>
            
            <tag> Calculus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Everything Can Work 0x0000： Order of Initialization</title>
      <link href="2020/10/06/cpp-everything-can-work-0/"/>
      <url>2020/10/06/cpp-everything-can-work-0/</url>
      
        <content type="html"><![CDATA[<h1 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h1><p>All codes in this article run in the environment below:</p><ul><li>Ubuntu 20.04 LTS</li><li>CMake 3.17</li><li>GCC 9.3(C++ 17)</li></ul><p>Please pay attention to influences brought by the differences between different compiler versions.<br><a id="more"></a></p><h1 id="A-Simple-Example"><a href="#A-Simple-Example" class="headerlink" title="A Simple Example"></a>A Simple Example</h1><p>Here is a simple example of class:</p><pre><code class="lang-c++">class Foo &#123;public:    Foo(const int&amp; a) :_a(a), _b(_a + 1) &#123;&#125;    int getB() &#123;        return _b;    &#125;private:    int _a, _b;&#125;;</code></pre><p>We defined a class called “Foo” that has two integer member variables <code>_a</code> and <code>_b</code>. Now we can create an instance of Foo:</p><pre><code class="lang-c++">int main() &#123;    Foo foo(2);    std::cout &lt;&lt; foo.getB() &lt;&lt; std::endl;    return 0;&#125;</code></pre><p>This program will output a single number 3.</p><h1 id="What’s-Wrong"><a href="#What’s-Wrong" class="headerlink" title="What’s Wrong?"></a>What’s Wrong?</h1><p>Let’s do some tricks:</p><pre><code class="lang-c++">private:    int _b, _a;</code></pre><p>We exchanged the order of two member variables. Compiling and running our new program, and we may get:<br><img src="https://i.loli.net/2020/10/06/YNHjzPyUm5oIGh7.png" alt="Screenshot from 2020-10-06 17-15-29.png"></p><p>What’s wrong with our class? Is <code>_a</code> correct? </p><h1 id="The-Order-of-Initialization"><a href="#The-Order-of-Initialization" class="headerlink" title="The Order of Initialization"></a>The Order of Initialization</h1><p>If we debug this program, we will find that <code>_a</code> is actually 2, not 32767 or something else.</p><p>It is worth noting that we initialized <code>_b</code> using <code>_a</code> rather than <code>a</code>. <strong>If <code>_b</code> is declared before <code>_a</code>, the variable <code>_b</code> will be initialized first!</strong><br>Because <code>_a</code> is not initialized yet, we can’t make sure what the value of <code>_a</code> is and so is <code>_b</code>. </p><p>Do remember, if a member variable’s value depends on others’ content, <strong>declare it later</strong>.<br>If you insist on using this confusing order, you should be careful to define constructor function:</p><pre><code class="lang-c++">Foo(const int&amp; a) :_a(a), _b(a + 1) /* use parameters to initialize instead of member variables! */ &#123;&#125;</code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ Everything Can Work </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ Class Getting Started(part1)</title>
      <link href="2020/10/03/cpp-class/"/>
      <url>2020/10/03/cpp-class/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一篇受朋友之邀而创作的文章，为了方便阅读，本文使用中文编写。</p><p>本文所使用C++版本为：C++ 17，请注意版本之间的差异带来的影响。</p><p>在正式的项目中，我们一般会将非<code>inline</code>函数的声明和实现分开，本文为了节约空间不采取这种方式。</p><a id="more"></a><h1 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h1><p>C++的类（包括很多其他的面向对象语言的类）都使用以下三个关键字来对类内的函数和变量进行访问控制：</p><pre><code class="lang-c++">class Student &#123;public: // 公有，外部和内部均可访问    Student();private: // 私有，仅内部和友元可以访问    int _age;protected: // 保护，仅内部，子类和友元可以访问    bool _is_day_reading;&#125;</code></pre><p>访问控制可以减少用户所能看到（以及所能操作）的函数和变量，这样的设计可以避免用户进行错误的操作，并能减少用户所需要了解的细节。如果一个电灯开关需要用户自己焊接电线，用户很有可能会焊错，这对用户来说是极其不友好的——用户不需要知道这么多实现细节，他只需要知道按下开关，灯泡可以亮起来，这就足够了。</p><p>基于以上的事实，所有用户没必要知道的细节均不应该被标识为<code>public</code>；所有的成员变量也不应该被标识为<code>public</code>，而是应该定义对应的getter/setter函数进行管理。</p><h1 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h1><h2 id="普通构造函数"><a href="#普通构造函数" class="headerlink" title="普通构造函数"></a>普通构造函数</h2><p>编译器会为你生成默认的构造函数和析构函数，除非你可以保证编译器的处理是正确的，否则不要在这一步偷懒：</p><pre><code class="lang-c++">Student(int age) : _age(age) &#123;&#125;</code></pre><p>注意请不要写为：</p><pre><code class="lang-c++">Student(int age) &#123;    _age = age;&#125;</code></pre><p>尤其是当你的成员变量为<code>const</code>的时候，这样的写法将会报错。</p><p>这个构造函数还存在一个问题：</p><pre><code class="lang-c++">Student a = 12;</code></pre><p>这句话是合法的！这意味着在代码中会有很多我们意想不到的隐式转换，这样的转换或者自动类型推断很有可能和我们的预期不符。为了防止这种情况出现，我们需要：</p><pre><code class="lang-c++">explicit Student(int age) : _age(age) &#123;&#125;</code></pre><h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2><p>一类特殊的构造函数叫做拷贝构造函数，他通常是为了执行这样的操作而准备的：</p><pre><code class="lang-c++">Student a(12), b(a);</code></pre><p>此时的b就是a的一份拷贝。</p><p>拷贝构造函数一般这样定义：</p><pre><code class="lang-c++">Student(const Student&amp; s) &#123;&#125;</code></pre><p>拷贝构造函数的参数为一个相同类型的常引用。根据标准文件，非常引用也是可以的（但不推荐）：</p><pre><code class="lang-c++">Student(Student&amp; s) &#123;&#125;</code></pre><p>拷贝构造函数也是编译器默认会为你生成的，但如果成员变量中涉及到指针等需要深拷贝的内容，还是需要自己动手丰衣足食。如果你不希望编译器为你生成这样的拷贝构造函数，并且你不希望拷贝行为的产生，你可以这样关闭它：</p><pre><code class="lang-c++">Student(Student&amp; s) = delete;</code></pre><h1 id="函数重载"><a href="#函数重载" class="headerlink" title="函数重载"></a>函数重载</h1><h2 id="普通函数重载"><a href="#普通函数重载" class="headerlink" title="普通函数重载"></a>普通函数重载</h2><p>拥有不同参数类型的函数可以进行重载：</p><pre><code class="lang-c++">void greet() &#123;    std::cout &lt;&lt; &quot;hello&quot; &lt;&lt; std::endl;&#125;void greet(const std::string&amp; name) &#123;    std::cout &lt;&lt; &quot;hello &quot; &lt;&lt; name &lt;&lt; std::endl;&#125;</code></pre><p>在调用的时候，编译器会根据不同的参数类型，选择合适的函数：</p><pre><code class="lang-c++">Student s(12);s.greet();s.greet(&quot;world&quot;);</code></pre><p>注意：如果两个函数仅仅只是返回值类型不同，或者修饰符不同，是不能进行重载的。</p><h2 id="操作符重载"><a href="#操作符重载" class="headerlink" title="操作符重载"></a>操作符重载</h2><p>除了普通的函数，我们还可以对操作符进行重载：</p><pre><code class="lang-c++">int operator+ (const int&amp; a) &#123;    this-&gt;_age += a;    return this-&gt;_age;&#125;</code></pre><p>大部分的操作符都是可以重载的（从加减乘除到下标逻辑等等），仅以下的几个操作符无法重载：<code>.</code>，<code>?:</code>，<code>::</code>，<code>sizeof</code>，<code>*</code>（引用指向类成员的指针）。尽管如此，除非操作明确（比如两个复数相乘，这个操作是明确的），不要随意重载操作符。部分操作符会造成预料外的问题（如重载<code>&amp;&amp;</code>会造成逻辑判断的阻断无效），有些重载并不能给予明确的意义（向量重载<code>*</code>乘法，究竟是点乘还是叉乘呢？）会误导用户。</p>]]></content>
      
      
      <categories>
          
          <category> Entrusted Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Count the Number of Words in Python</title>
      <link href="2020/10/03/python-word-count/"/>
      <url>2020/10/03/python-word-count/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这是一篇受朋友之邀而创作的文章，为了方便阅读，本文使用中文编写。</p><p>本文所使用的解释器版本为：Python 3.8，无需其他依赖库，请注意版本之间的差异带来的影响。</p><a id="more"></a><h1 id="单词计数"><a href="#单词计数" class="headerlink" title="单词计数"></a>单词计数</h1><h2 id="使用字典进行计数"><a href="#使用字典进行计数" class="headerlink" title="使用字典进行计数"></a>使用字典进行计数</h2><p>首先我们需要把一句话划分为数个单词组成的数组：</p><pre><code class="lang-python">article = &quot;I thought what I&#39;d do was I&#39;d pretend I was one of those deaf-mutes.&quot;words = article.split(&#39; &#39;)print(words)</code></pre><p>你的输出应该是类似这样的：</p><pre><code>[&#39;I&#39;, &#39;thought&#39;, &#39;what&#39;, &quot;I&#39;d&quot;, &#39;do&#39;, &#39;was&#39;, &quot;I&#39;d&quot;, &#39;pretend&#39;, &#39;I&#39;, &#39;was&#39;, &#39;one&#39;, &#39;of&#39;, &#39;those&#39;, &#39;deaf-mutes.&#39;]</code></pre><p>然而这并不够完美：<code>deaf-mutes</code>和<code>deaf-mutes.</code>（多了一个英文句号）会被认为是两个单词。我们需要使用正则表达式进行更完美的分割：</p><pre><code class="lang-python">import rearticle = &quot;I thought what I&#39;d do was I&#39;d pretend I was one of those deaf-mutes.&quot;words = re.split(r&quot;[ .;]&quot;, article)print(words)</code></pre><p>虽然这样会导致多出一个空的字符串，但处理空串这比让我们区分<code>deaf-mutes</code>和<code>deaf-mutes.</code>要容易多了。</p><p>接下来建立一个字典，并对单词数量进行统计：</p><pre><code class="lang-python">numbers = &#123;&#125;for word in words:    if word == &quot;&quot;:        continue    if word in numbers:        numbers[word] += 1    else:        numbers[word] = 1print(numbers)</code></pre><p>我们首先建立一个空的字典，并遍历我们刚刚生成的单词列表。如果当前的单词为空，那么忽略它直接处理下一个；否则我们查看该单词在字典中是否已经出现过——如果出现过我们将数字加1,否则这是一个新的单词，将其添加到字典中。</p><p>最后的输出应该类似于这样：</p><pre><code>&#123;&#39;I&#39;: 2, &#39;thought&#39;: 1, &#39;what&#39;: 1, &quot;I&#39;d&quot;: 2, &#39;do&#39;: 1, &#39;was&#39;: 2, &#39;pretend&#39;: 1, &#39;one&#39;: 1, &#39;of&#39;: 1, &#39;those&#39;: 1, &#39;deaf-mutes&#39;: 1&#125;</code></pre><h2 id="按照词频进行排序"><a href="#按照词频进行排序" class="headerlink" title="按照词频进行排序"></a>按照词频进行排序</h2><p>我们可能需要知道出现频率最高的几个单词，这要求我们按照出现频率进行排序。为了实现排序，我们需要将字典转为列表：</p><pre><code class="lang-python">pairs = list(numbers.items())print(pairs)</code></pre><p>我们可以得到：</p><pre><code>[(&#39;I&#39;, 2), (&#39;thought&#39;, 1), (&#39;what&#39;, 1), (&quot;I&#39;d&quot;, 2), (&#39;do&#39;, 1), (&#39;was&#39;, 2), (&#39;pretend&#39;, 1), (&#39;one&#39;, 1), (&#39;of&#39;, 1), (&#39;those&#39;, 1), (&#39;deaf-mutes&#39;, 1)]</code></pre><p>这样的结果：一个包含二元元组的列表。我们只需要按照元组的第二维（实际上是第一维，下标通常都是从0开始的）进行排序即可：</p><pre><code class="lang-python">pairs = sorted(pairs, key=lambda x: x[1], reverse=True)print(pairs)</code></pre><p>这里我们使用了一个<code>lambda</code>表达式来指定排序所使用的键，你也可以使用一个普通的函数来完成。</p><p>输出结果应该类似于这样：</p><pre><code>[(&#39;I&#39;, 2), (&quot;I&#39;d&quot;, 2), (&#39;was&#39;, 2), (&#39;thought&#39;, 1), (&#39;what&#39;, 1), (&#39;do&#39;, 1), (&#39;pretend&#39;, 1), (&#39;one&#39;, 1), (&#39;of&#39;, 1), (&#39;those&#39;, 1), (&#39;deaf-mutes&#39;, 1)]</code></pre><p>接下来我们就可以得到出现次数前k的单词是什么了：</p><pre><code class="lang-python">k = 3for i in range(k):    print(pairs[i][0])</code></pre>]]></content>
      
      
      <categories>
          
          <category> Entrusted Tutorial </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
